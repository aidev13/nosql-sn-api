// implement express.js
// implement mongoDB
// implement Mongoose ODM
// use a JS date library or use the native JS 'DATE' object to format timestamps:

        // below is some native JS 'Date' objects

            const currentDate = new Date();
            // Access different properties of the Date object
            const year = currentDate.getFullYear();
            const month = currentDate.getMonth(); // Months are 0-based (0 = January, 11 = December)
            const day = currentDate.getDate();
            const hours = currentDate.getHours();
            const minutes = currentDate.getMinutes();
            const seconds = currentDate.getSeconds();

// build models in accordance to criteria
    MODELS: User, Thought, Reaction

>User:
        //username
            String
            Unique
            Required
            Trimmed

        //email
            String
            Required
            Unique
            Must match a valid email address (look into Mongoose's matching validation)

        //thoughts
            Array of _id values referencing the Thought model

        //friends
            Array of _id values referencing the User model (self-reference)

        //Schema Settings
            Create a virtual called friendCount that retrieves the length of the user's friends array field on query.


>Thought:
        //thoughtText
            String
            Required
            Must be between 1 and 280 characters

        //createdAt
            Date
            Set default value to the current timestamp
            Use a getter method to format the timestamp on query

        //username (The user that created this thought)
            String
            Required

        //reactions (These are like replies)
            Array of nested documents created with the reactionSchema

        //Schema Settings
            Create a virtual called reactionCount that retrieves the length of the thought's reactions array field on query.


>Reaction (SCHEMA ONLY):
        //reactionId
            Use Mongoose's ObjectId data type
            Default value is set to a new ObjectId

        //reactionBody
            String
            Required
            280 character maximum

        //username
            String
            Required

        //createdAt
            Date
            Set default value to the current timestamp
            Use a getter method to format the timestamp on query

        //Schema Settings
            This will not be a model, but rather will be used as the reaction field's subdocument schema in the Thought model.

--- --- --- --- --- --- ---

//Build API routes

>PATH: /api/users

        GET all users

        GET a single user by its _id and populated thought and friend data

        POST a new user:

        // example data
        {
        "username": "lernantino",
        "email": "lernantino@gmail.com"
        }

        PUT to update a user by its _id

        DELETE to remove user by its _id

        BONUS: Remove a user's associated thoughts when deleted.

>PATH: /api/users/:userId/friends/:friendId

        POST to add a new friend to a user's friend list

        DELETE to remove a friend from a user's friend list

>PATH: /api/thoughts

        GET to get all thoughts

        GET to get a single thought by its _id

        POST to create a new thought (don't forget to push the created thought's _id to the associated user's thoughts array field)

        // example data
        {
        "thoughtText": "Here's a cool thought...",
        "username": "lernantino",
        "userId": "5edff358a0fcb779aa7b118b"
        }

        PUT to update a thought by its _id

        DELETE to remove a thought by its _id


>PATH: /api/thoughts/:thoughtId/reactions

        POST to create a reaction stored in a single thought's reactions array field

        DELETE to pull and remove a reaction by the reaction's reactionId value


// demo code by creating a walkthrough video


// acceptance criteria
    //GIVEN a social network API
    WHEN I enter the command to invoke the application
    THEN my server is started and the Mongoose models are synced to the MongoDB database
    WHEN I open API GET routes in Insomnia for users and thoughts
    THEN the data for each of these routes is displayed in a formatted JSON
    WHEN I test API POST, PUT, and DELETE routes in Insomnia
    THEN I am able to successfully create, update, and delete users and thoughts in my database
    WHEN I test API POST and DELETE routes in Insomnia
    THEN I am able to successfully create and delete reactions to thoughts and add and remove friends to a userâ€™s friend list

